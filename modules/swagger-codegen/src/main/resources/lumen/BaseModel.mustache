<?php
/**
 * BaseModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   Display Name <richard.p@irokopartners.com>
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace {{modelPackage}};

use \JsonSerializable;
use \Illuminate\Contracts\Support\Arrayable;
use \Illuminate\Support\MessageBag;

/**
 * BaseModel Class Doc Comment
 *
 * @category    Class
 * @description Concrete implementation of JsonSerializable Model
 * @package     App
 * @author      Display Name <richard.p@irokopartners.com>
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BaseModel implements JsonSerializable, Arrayable
{
    protected $validationErrors;

    /**
     * Constructor
     * @param mixed[] $data array or json string containing data to initialize
     * the model
     */
    public function __construct($data = null)
    {
        $this->validationErrors = new MessageBag();
        if ($data !== null) {
            $this->load($data);
        }
    }

    /**
     * Returns the string representation of this object
     * @return string The json representation of this object
     * the model
     */
    public function __toString()
    {
        return json_encode($this);
    }

    /**
     * Prepares this object for json serialization
     * @see \JsonSerializable::jsonSerialize()
     * @return array
     */
    public function jsonSerialize()
    {
        return $this->toArray();
    }

    /**
     * Returns an array representation of the object's properties
     * @see \Illuminate\Contracts\Support\Arrayable::toArray()
     * @return array
     */
    public function toArray()
    {
        // Do not include the validation errors
        $vars = get_object_vars($this);
        unset($vars["validationErrors"]);
        return $vars;
    }

    /**
     * Returns the array of field-level validation failures
     *
     * @return ValidationErrorCollection
     */
    public function getValidationErrors()
    {
        return $this->validationErrors;
    }

    /**
     * Confirms that property value types match the list of language specific primitives defined during codegen
     *
     * @param mixed  $value The value to type check
     * @param string $type  The expected type
     *
     * @return boolean
     */
    protected function isValid($value, $type)
    {
        switch ($type) {
            case "boolean":
                return is_bool($value);
            break;
            case "int":
                return is_int($value);
            break;
            case "integer":
                return is_integer($value);
            break;
            case "double":
                return is_double($value);
            break;
            case "float":
                return is_float($value);
            break;
            case "string":
                return is_string($value);
            break;
            case "object":
                return is_object($value);
            break;
            case "DateTime":
                return \DateTime::createFromFormat("Y-m-d H:i:s", $value) !== false;
            break;
            case "mixed":
                // ??
                return true;
            break;
            case "number":
                return is_numeric($value);
            break;
            default:
                return true;
        }
    }

    protected function createDateTime($keyName, $data)
    {
        $obj = null;
        if (is_object($data[$keyName])
            && get_class($data[$keyName]) === "DateTime"
        ) {
            // assign it directly
            $obj = $data[$keyName];
        } else {
            // parse the value to a datetime
            $obj = \DateTime::createFromFormat(
                'Y-m-d h:i:s',
                $data[$keyName]
            );
        }
        return $obj;
    }
}
