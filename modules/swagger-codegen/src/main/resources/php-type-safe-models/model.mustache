<?php
{{#models}}
{{#model}}
/**
 * {{classname}}
 *
 * PHP version 5
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   Display Name <richard.p@irokopartners.com>
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace {{invokerPackage}}\{{modelPackage}};

/**
 * {{classname}} Class Doc Comment
 *
 * @category    Class
 * @description {{description}}
 * @package     {{invokerPackage}}
 * @author      Display Name <richard.p@irokopartners.com>
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class {{classname}} {{#isCollection}}extends ModelCollection{{/isCollection}}{{^isCollection}}extends Model{{/isCollection}}
{
{{#isCollection}}    protected $itemType = '\{{invokerPackage}}\{{modelPackage}}\{{itemType}}';{{/isCollection}}{{#vars}}
    /**
     * ${{baseName}}{{#description}}{{{description}}}{{/description}}
     * @var {{baseType}}
     */
    protected ${{baseName}};{{/vars}}
    
    /**
     * Loads data into the model
     *
     * @param mixed $data json or array containing values to initialize
     *
     * @return $this
     */
    public function load($data)
    {
        if (!is_array($data)) {
            $data = json_decode($data, true);
            if ($data === null) {
                throw new \Exception("invalid json");
            }
        }
        {{#isCollection}}$this->setItems($data);{{/isCollection}}{{#vars}}if (array_key_exists("{{baseName}}", $data)) {
            {{^isPrimitiveType}}{{^isDateTime}}{{^isArray}}$obj = new {{baseType}}();
            $obj->load($data["{{baseName}}"]);{{/isArray}}{{/isDateTime}}{{#isDateTime}}$obj = $this->createDateTime("{{baseName}}", $data);
            if ($obj == null) {
                $this->validationErrors->add(
                    "{{baseName}}",
                    "Must be in format RFC_3339"
                );
            } else {
                $this->{{setter}}($obj);
            }{{/isDateTime}}{{^isArray}}{{^isDateTime}}
            $this->{{setter}}($obj);{{/isDateTime}}{{/isArray}}{{/isPrimitiveType}}{{#isArray}}$this->{{setter}}($data["{{baseName}}"]);{{/isArray}}{{^isArray}}{{#isPrimitiveType}}$this->{{setter}}($data["{{baseName}}"]);{{/isPrimitiveType}}{{/isArray}}
        }{{#required}} else {
            $this->validationErrors->add(
                "{{baseName}}",
                "Must not be null"
            );
        }{{/required}}{{#hasMore}}
        {{/hasMore}}{{/vars}}
        {{^isCollection}}//check for validation errors
        if ($this->validationErrors->count() > 0) {
            throw new \Exception("Invalid data : ".print_r($data, true) .PHP_EOL.print_r($this->validationErrors, true));
        }{{/isCollection}}
        return $this;
    }{{#vars}}

    /**
     * Gets {{baseName}}
     * @return {{baseType}}
     */
    public function {{getter}}()
    {
        return $this->{{baseName}};
    }
  
    /**
     * Sets {{baseName}}
     * @param {{baseType}} ${{baseName}}{{#description}}{{{description}}}{{/description}}
     * @return $this
     */
    public function {{setter}}({{^isPrimitiveType}}{{^isArray}}{{baseType}} {{/isArray}}{{/isPrimitiveType}}${{baseName}})
    {
        {{#isPrimitiveType}}if ($this->isValid(${{baseName}}, "{{baseType}}")) {
            {{#isEnum}}$allowed_values = array({{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}});
            if (!in_array(${{{baseName}}}, $allowed_values)) {
                $this->validationErrors->add(
                    "{{baseName}}",
                    "Must be one of {{#allowableValues}}{{#values}}'{{{this}}}'{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}"
                );
            } else {
            {{/isEnum}}$this->{{baseName}} = ${{baseName}};{{#isEnum}}
            }{{/isEnum}}
        } else {
            $this->validationErrors->add(
                "{{baseName}}",
                "Must be of type {{baseType}}"
            );
        }{{/isPrimitiveType}}{{^isPrimitiveType}}$this->{{baseName}} = ${{baseName}};{{/isPrimitiveType}}
        return $this;
    }{{/vars}}
}
{{/model}}
{{/models}}