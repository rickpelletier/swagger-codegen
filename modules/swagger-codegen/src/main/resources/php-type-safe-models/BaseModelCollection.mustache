<?php
/**
 * ModelCollection
 *
 * PHP version 5
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   Display Name <richard.p@irokopartners.com>
 * @description Base model collection class
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace {{invokerPackage}}\{{modelPackage}};

use Illuminate\Pagination\LengthAwarePaginator;
use \JsonSerializable;
use \Illuminate\Contracts\Support\Arrayable;

/**
 * ModelCollection Class Doc Comment
 *
 * @category    Class
 * @description Convenience container for other Models
 * @package     App
 * @author      Display Name <richard.p@irokopartners.com>
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ModelCollection extends LengthAwarePaginator implements JsonSerializable, Arrayable
{
    
    protected $itemType;
    
    protected $items;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->setItems($data);
        } else {
            $this->items = [];
        }
    }

    /**
     * Remove all items
     *
     * @return void
     */
    public function clearItems()
    {
        $this->items = [];
    }

    /**
     * Set all of the items in the collection
     *
     * @param mixed $data The items to set
     *
     * @return void
     */
    public function setItems($data)
    {
        $this->items = [];
        foreach ($data as $newItemData) {
            $this->addItem($newItemData);
        }
    }

    /**
     * Add a single item
     *
     * @param mixed $newItemData The item to add
     *
     * @return void
     */
    public function addItem($newItemData)
    {
        $newItem = $newItemData;
        $itemType = $this->itemType;
        if (is_array($newItemData)) {
            $newItem = new $itemType($newItemData);
        }
        $this->items[] = $newItem;
    }

    /**
     * Get all items
     *
     * @return array The items in the collection
     */
    public function getItems()
    {
        return $this->items;
    }

    /**
     * Returns the string representation
     *
     * @return string The string representation of the object
     */
    public function __toString()
    {
        return json_encode($this);
    }

    /**
     * Serialize this object to json format
     *
     * @see \JsonSerialize::jsonSerialize()
     *
     * @return string The json representation of this object
     */
    public function jsonSerialize()
    {
        $ret = [];
        if (count($this->items) > 0) {
            foreach ($this->items as $item) {
                $ret[] = $item->jsonSerialize();
            }
        }
        return $ret;
    }

    /**
     * Returns an array representation of the collection items
     * @see \Illuminate\Contracts\Support\Arrayable::toArray()
     * @return array
     */
    public function toArray()
    {
        return $this->getItems();
    }

    /**
     * Get the number of items for the current page.
     *
     * @return int
     */
    public function count()
    {
        return count($this->items);
    }

    /**
     * Get an iterator for the items.
     *
     * @return \ArrayIterator
     */
    public function getIterator()
    {
        return new \ArrayIterator($this->items);
    }

    /**
     * Sets the Pagination info
     *
     * @param $total
     * @param $perPage
     * @param $currentPage
     * @param array $options
     */
    public function setPaginationInfo($path, $total, $perPage, $currentPage, $query)
    {
        $this->path = $path;
        $this->total = $total;
        $this->perPage = $perPage;
        $this->lastPage = (int) ceil($total / $perPage);
        $this->currentPage = $this->setCurrentPage($currentPage, $this->lastPage);
        $this->path = $this->path != '/' ? rtrim($this->path, '/').'/' : $this->path;
        $this->query = $query;
    }

    /**
     * Gets the Pagination info
     *
     * @param $total
     * @param $perPage
     * @param $currentPage
     * @param array $options
     */
    public function getPaginationInfo()
    {
        return [
            "path" => $this->path,
            "total" => $this->total,
            "perPage" => $this->perPage,
            "lastPage" => $this->lastPage,
            "currentPage" => $this->currentPage,
            "query" => $this->query
        ];
    }
}